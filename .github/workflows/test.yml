name: Tests

on:
  push:
    branches:
      - '**'
    paths-ignore:
      - 'docs/**'
      - '**.md'
      - '.vscode/**'
  pull_request:
    branches: [ main ]
  repository_dispatch:
    types: [run-tests]
  workflow_dispatch:

jobs:
  tests:
    name: ${{ matrix.suite.name }} - Unity ${{ matrix.unity.version }}
    permissions:
      pages: write
      id-token: write
      checks: write
      pull-requests: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-20.04
        unity:
          - { version: "2022.1.14f1" }
          - { version: "2021.1.28f1" }
          - { version: "2020.3.38f1" }
          - { version: "2019.4.40f1" }
        suite:
          - { name: "Unit Tests", assemblies: "ReactUnity.Tests;ReactUnity.Tests.Editor" }
        include:
          - main: true
            coverage: true
            unity: { version: "2021.3.8f1" }
            suite: { name: "Unit Tests", assemblies: "ReactUnity.Tests;ReactUnity.Tests.Editor" }
          - performance: true
            unity: { version: "2021.3.8f1" }
            suite: { name: "Performance Tests", assemblies: "ReactUnity.Tests.Performance" }
    runs-on: ${{ matrix.platform || 'ubuntu-20.04' }}
    steps:
      - name: Checkout core library
        uses: actions/checkout@v2
        with:
          path: core

      - name: Checkout test project
        uses: actions/checkout@v2
        with:
          ref: ${{ matrix.suite.testBranch || 'tests' }}
          path: tests

      - name: Checkout Jint plugin
        uses: actions/checkout@v2
        with:
          ref: main
          path: jint
          repository: ReactUnity/jint

      - name: Checkout QuickJS plugin
        uses: actions/checkout@v2
        with:
          ref: main
          path: quickjs
          repository: ReactUnity/quickjs

      - name: Checkout ClearScript plugin
        uses: actions/checkout@v2
        with:
          ref: main
          path: clearscript
          repository: ReactUnity/clearscript


      - name: Cache Unity Library
        uses: actions/cache@v2
        with:
          path: tests/Library
          key: Library-${{ matrix.unity.version }}-${{ matrix.platform || 'ubuntu-20.04' }}
          restore-keys: |
            Library-


      - name: Clear React Unity package lock
        run: |
          echo $(cat tests/Packages/packages-lock.json | jq 'del(.dependencies["com.reactunity.core"])') > tests/Packages/packages-lock.json
          echo $(cat tests/Packages/packages-lock.json | jq 'del(.dependencies["com.reactunity.jint"])') > tests/Packages/packages-lock.json
          echo $(cat tests/Packages/packages-lock.json | jq 'del(.dependencies["com.reactunity.quickjs"])') > tests/Packages/packages-lock.json
          echo $(cat tests/Packages/packages-lock.json | jq 'del(.dependencies["com.reactunity.clearscript"])') > tests/Packages/packages-lock.json

      - name: Install local React Unity package
        run: |
          echo $(cat tests/Packages/manifest.json | jq '.dependencies["com.reactunity.core"]="file:../../core"') > tests/Packages/manifest.json
          echo $(cat tests/Packages/manifest.json | jq '.dependencies["com.reactunity.jint"]="file:../../jint"') > tests/Packages/manifest.json
          echo $(cat tests/Packages/manifest.json | jq '.dependencies["com.reactunity.quickjs"]="file:../../quickjs"') > tests/Packages/manifest.json
          echo $(cat tests/Packages/manifest.json | jq '.dependencies["com.reactunity.clearscript"]="file:../../clearscript"') > tests/Packages/manifest.json


      - name: Install TMP v2
        if: startsWith(matrix.unity.version, '2019')
        run: echo $(cat tests/Packages/manifest.json | jq '.dependencies["com.unity.textmeshpro"]="2.1.6"') > tests/Packages/manifest.json

      - name: Run Unity Tests
        uses: game-ci/unity-test-runner@v2
        id: testRunner
        continue-on-error: true
        env:
          UNITY_LICENSE: ${{ secrets[matrix.unity.license || 'UNITY_LICENSE'] }}
        with:
          unityVersion: ${{ matrix.unity.version }}
          testMode: ${{ contains(matrix.suite.assemblies, 'Editor') && 'All' || 'PlayMode' }}
          customParameters: ${{ matrix.coverage && '-enableCodeCoverage -debugCodeOptimization -coverageOptions assemblyFilters:+ReactUnity,+ReactUnity.*' || '' }} -assemblyNames ${{ matrix.suite.assemblies }}
          checkName: ${{ matrix.suite.name }} ${{ matrix.unity.version }}
          projectPath: tests

      - name: Cache previous run results
        if: matrix.performance
        uses: actions/cache@v3
        with:
          path: tests/TestResults
          key: previous-runs-${{ github.sha }}
          restore-keys: |
            previous-runs-

      - name: Copy test results to previous runs
        if: matrix.performance
        working-directory: ./tests
        run: |
          mkdir -p TestResults
          cd "${{ github.workspace }}/${{ steps.testRunner.outputs.artifactsPath }}"
          find . -name \*.xml -exec cp {} "${{ github.workspace }}/tests/TestResults/${{ github.sha }}_{}" \;

      - name: Generate Performance Report
        if: matrix.performance
        working-directory: ./tests
        run: dotnet PerformanceReporter/UnityPerformanceBenchmarkReporter.dll --results="${{ github.workspace }}/tests/TestResults" --reportdirpath=PerformanceReport

      - name: Rename Performance Report
        working-directory: ./tests/PerformanceReport/UnityPerformanceBenchmark
        if: matrix.performance
        run: |
          find . -name '*.html' -exec bash -c 'mv $0 index.html' {} \;
          cd ..
          mv UnityPerformanceBenchmark Performance

      - name: Commit Snapshots
        if: hashFiles('core/Tests/.snapshots/snapshots.lock') != '' && matrix.main
        uses: EndBug/add-and-commit@v7
        with:
          add: 'Tests/.snapshots'
          cwd: './core'
          default_author: github_actions
          message: 'Update snapshots'
          pull: 'NO-PULL'


      - name: Set artifacts folder ownership to current user
        run: sudo chown -R $(id -u):$(id -g) "${{ github.workspace }}/${{ steps.testRunner.outputs.artifactsPath }}"

      # Workaround for NUnit XML (see https://github.com/dorny/test-reporter/issues/98#issuecomment-867106931)
      - name: Install NUnit
        run: |
          nuget install NUnit.Console -Version 3.12.0

      - name: Fetch transform code
        working-directory: "${{ github.workspace }}/${{ steps.testRunner.outputs.artifactsPath }}"
        run: |
          wget https://raw.githubusercontent.com/nunit/nunit-transforms/master/nunit3-junit/nunit3-junit.xslt
        shell: bash

      - name: Transform NUnit3 to JUnit
        working-directory: "${{ github.workspace }}/${{ steps.testRunner.outputs.artifactsPath }}"
        run: |
          Get-ChildItem . -Filter *.xml | Foreach-Object {
            $xml = Resolve-Path $_.FullName
            $output = Join-Path ($pwd) ($_.BaseName + '_junit.xml')
            $xslt = New-Object System.Xml.Xsl.XslCompiledTransform;
            $xslt.Load("nunit3-junit.xslt");
            $xslt.Transform($xml, $output);
          }
        shell: pwsh

      - uses: EnricoMi/publish-unit-test-result-action@v1
        id: test-results
        with:
          check_name: "${{ matrix.suite.name }} ${{ matrix.unity.version }}"
          files: "${{ github.workspace }}/${{ steps.testRunner.outputs.artifactsPath }}/*_junit.xml"

      - name: Set badge color
        shell: bash
        run: |
          case ${{ fromJSON( steps.test-results.outputs.json ).conclusion }} in
            success)
              echo "BADGE_COLOR=31c653" >> $GITHUB_ENV
              ;;
            failure)
              echo "BADGE_COLOR=800000" >> $GITHUB_ENV
              ;;
            neutral)
              echo "BADGE_COLOR=696969" >> $GITHUB_ENV
              ;;
          esac

      - name: Create badge
        uses: emibcn/badge-action@d6f51ff11b5c3382b3b88689ae2d6db22d9737d1
        with:
          label: Tests
          status: '${{ fromJSON( steps.test-results.outputs.json ).stats.tests_succ }}/${{ fromJSON( steps.test-results.outputs.json ).stats.tests }}'
          color: ${{ env.BADGE_COLOR }}
          path: ReactUnityTestBadge.svg
          style: flat
          scale: 1.4

      - name: Upload badge to Gist
        if: github.ref == 'refs/heads/main' && always() && matrix.main
        uses: andymckay/append-gist-action@1fbfbbce708a39bd45846f0955ed5521f2099c6d
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gistURL: https://gist.githubusercontent.com/KurtGokhan/f744e86dd53cd0159d4f1d56ae9aae19
          file: ReactUnityTestBadge.svg


      - name: Upload Test Result Artifacts
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: "${{ matrix.suite.name }} ${{ matrix.unity.version }}"
          path: ${{ steps.testRunner.outputs.artifactsPath }}

      - name: Fail workflow if tests failed
        if: steps.testRunner.outcome == 'failure' && (fromJSON(steps.test-results.outputs.json).conclusion == 'failure' || fromJSON(steps.test-results.outputs.json).stats.tests == 0)
        uses: actions/github-script@v3
        with:
          script: |
              core.setFailed('Tests failed!')

      - name: Upload Coverage to codecov
        if: matrix.coverage && matrix.main
        uses: codecov/codecov-action@v2
        with:
          working-directory: ./core
          files: ../CodeCoverage/tests-opencov/PlayMode/TestCoverageResults_0000.xml,../CodeCoverage/tests-opencov/EditMode/TestCoverageResults_0000.xml
          flags: unittests

      - name: Setup Github Pages
        if: matrix.performance && always()
        uses: actions/configure-pages@v2

      - name: Upload Pages Artifact
        if: matrix.performance && always()
        uses: actions/upload-pages-artifact@v1
        with:
          path: './tests/PerformanceReport/Performance'

      - name: Deploy to GitHub Pages
        if: matrix.performance && always()
        id: deployment
        uses: actions/deploy-pages@v1
